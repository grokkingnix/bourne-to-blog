#! /bin/bash

# Edit these variables to fit your environment before first use

# Start editing
############

# Define global script variables
# Source directory that contains the original files to process
SOURCE_DIR=/path/to/the/md/files/that/will/be/built

# Directory to store html files created by the buildWebsite function
WORK_DIR=/directory/to/store/your/built/blog/posts

# Blog posts path on the public server
BLOG_DIR=/blog/path/on/your/webserver

# Full path to the header file
HEADER_FILE=/path/to/the/header/file.html

# Full path to the footer file
FOOTER_FILE=/path/to/the/footer/file.html

# Variables for SFTP connection
USER=ftpusername
HOST=ftp.host.name.com
IDENTITY_FILE=/home/username/.ssh/identity-file

# The format/extension that the files to process are in
SOURCE_EXTENSION=*.md

# Stop editing
############

# Script functionality begins
############
# If you edit anything below this point, you may break the script!

# Define the flags the user can pass to the script
while getopts bpf flag
do
    case "${flag}" in
	b) BUILD=true;;
	p) PUBLISH=true;;
	f) FORCE_PUB=true;;
esac
done

# Execution message for the buildWebsite function
EXEC_MSG="Building Posts"

# Completion message for the buildWebsite function
COMPLETION_MSG="Posts Built"

# No files to upload message for the publishPosts function when the WORK_DIR folder is empty
NO_FILES_MSG="There are no new posts to publish, the $WORK_DIR directory is empty. Try running blog -b first or blog -bf."

# No files to upload message for the publishPosts function when no new posts are found
NO_FILES_MSG1="There are no new posts to publish, if you want to overwrite posts use the -f flag instead."

# Define the GREP_REGEX variable with the regex to obtain the date from the ls command
GREP_REGEX="[0-9][0-9]:[0-9][0-9] [A-Za-z]"

# Define the EXT_REGEX variable with extended grep regex to match post names
EXT_REGEX=".{0,200}"

# Command to be executed while connected to the web server over SFTP, to list contents of the BLOG_DIR directory
REMOTE_LS="ls -l $BLOG_DIR"

# Define the OUTPUT variable with the output from the REMOTE_LS variable value over the SFTP connection on the web server
OUTPUT=`(echo "$REMOTE_LS"; echo quit) | sftp -b - -i "$IDENTITY_FILE" "$USER"@"$HOST"`

# Function that will build the posts
function buildPosts() {

    # Message when starting the function
    echo $EXEC_MSG

    # For loop that goes over all files with the .md extension in the specified directory
    for FILE in $SOURCE_DIR$SOURCE_EXTENSION
    do
        # Define for loop variables
        # Define the FILE_NAME variable from the FILE variable value, removes the extension
        FILE_NAME=`basename "$FILE" | cut -d "." -f 1`
    
        # Define the HEADER_FILE variable in the for loop from the global HEADER_FILE variable value
        HEADER_FILE=$1
    
        # Define the FOOTER_FILE variable in the for loop from the global FOOTER_FILE variable value
        FOOTER_FILE=$2
    
        # Define the WORK_DIR variable in the for loop from the global WORK_DIR variable value
        WORK_DIR=$3

	# Define the CURRENT_FILE variable
	CURRENT_FILE="Creating $FILE_NAME"
    	
        # Echo the value of the CURRENT_FILE variable value, the current file being created
        echo $CURRENT_FILE
    
        # Use the Markdown library to create the temporary HTML file
        markdown $FILE > $WORK_DIR$FILE_NAME
    
        # Build the page with the header and footer file content and concatenate to a new HTML file
        cat $HEADER_FILE $WORK_DIR$FILE_NAME $FOOTER_FILE > $WORK_DIR$FILE_NAME.html
    
        # Delete the $FILE_NAME file which has no .html extension
        rm $WORK_DIR$FILE_NAME
    
    # End the for loop
    done

    # Echo a completion message
    echo $COMPLETION_MSG 
}

# Function that will publish the posts to the public web server
function publishPosts() {

    # Define the ALL_FILES variable with the value of the HTML files that are present in the WORK_DIR directory
    ALL_FILES=`ls -A $WORK_DIR | grep ".html$"`

    # Define the FILES variable with the value of the local files names that are not present on the file server
    FILES=`diff <(ls $WORK_DIR | sort -f) <(grep -oE " $GREP_REGEX$EXT_REGEX" <<< "$OUTPUT" | cut -d " " -f 3 | sort -f) | grep -E "^[<].*html$" | sed 's/< //'`

    # Define the NUMBER variable with the count of files to be uploaded to the web server
    NUMBER=`diff <(ls $WORK_DIR | sort -f) <(grep -oE " $GREP_REGEX$EXT_REGEX" <<< "$OUTPUT" | cut -d " " -f 3 | sort -f) | grep -E "^[<].*html$" | sed 's/< //' | wc -l`

    # Deterimine if the force flag was used
    if [ $1 ]
    then

	# Determine if any files exist in the $WORK_DIR directory
	if [ "$(ls -A $WORK_DIR)" ]
	then

    	# Upload the files in the FILES variable to the web server
    	echo "$ALL_FILES" | while read LINE ; do (echo cd $BLOG_DIR; echo lcd $WORK_DIR; echo put $LINE; echo quit) | sftp -b - -i "$IDENTITY_FILE" "$USER"@"$HOST" ; done

	else

    	    # Echo a message and do nothing if there are no files in the WORK_DIR directory
    	    echo $NO_FILES_MSG
	fi

    else

	# Determine if there are any new files (that don't already exist in the web server) that need to be uploaded to the web server
    	if [ $NUMBER -ge 1 ]
    	then
    	    
    	    # Upload the files in the FILES variable to the web server
    	    echo "$FILES" | while read LINE ; do (echo cd $BLOG_DIR; echo lcd $WORK_DIR; echo put $LINE; echo quit) | sftp -b - -i "$IDENTITY_FILE" "$USER"@"$HOST" ; done
    	
    	else

    	    # Echo a message and do nothing if there are no new files in the WORK_DIR directory
    	    echo $NO_FILES_MSG1
    	fi
    fi
}

# Execute the buildPosts function if the -b flag was specified by the user. 
# This option will convert all files from .md to .html by using the markdown command
if [ $BUILD ]
then

    # Call the buildWebsite function and pass global variables
    buildPosts $HEADER_FILE $FOOTER_FILE $WORK_DIR
fi

# Execute the publishPosts function if the -p flag was specified by the user. 
# This is option will only upload files if they are not already found on the web server
if [ $PUBLISH ]
then

    # Call the publishPosts function
    publishPosts
fi

# Execute the publishPosts function without checking for new posts if the -f flag was specified by the user. 
# This option will force upload of all files in $WORK_DIR to $BLOG_DIR resulting in overwriting of existing files in the web server 
if [ $FORCE_PUB ]
then

    # Call the publishPosts function and pass the FORCE_PUB variable
    publishPosts $FORCE_PUB
fi
