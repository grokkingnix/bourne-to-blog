#! /bin/bash

# Edit these variables to fit your environment before first use

# Start editing
############

# Define global script variables
# Source directory that contains the original files to process
SOURCE_DIR=/path/to/the/md/files/that/will/be/built

# Directory to store html files created by the buildWebsite function
WORK_DIR=/directory/to/store/your/built/blog/posts

# Blog posts path on the public ftp server, where blog posts and blog index will reside
BLOG_DIR=/blog/path/on/your/webserver

# Blog posts folder name on the public ftp server, without slashes "/"
BLOG_DIR_NAME=posts

# Document root path on the public ftp server, where pages like index.html and feed.xml will reside
ROOT_WEB_DIR=/root/path/on/your/webserver

# Blog index path on the public web server, where the page that will display blog entries will reside
BLOG_MAIN=/web/path/to/blog/

# Blog domain without an ending slash "/"
BLOG_DOMAIN=https://yourdomain.com

# Blog index page name
BLOG_INDEX=/path/to/the/blog/index/file.md

# Public address for the blog index page without an ending slash "/"
BLOG_MAIN_PAGE=https://yourdomain.com/path/to/blog.html

# Full path to the RSS header file.
RSS_HEADER_FILE=/path/to/the/rss/header/file

# Full path to the RSS footer file.
RSS_FOOTER_FILE=/path/to/the/rss/footer/file

# Full path to the individual blog post header file. This value will be ignored if the -h flag is provided
HEADER_FILE=/path/to/the/header/file.html

# Full path to the footer file. This value will be ignored if the -f flag is provided
FOOTER_FILE=/path/to/the/footer/file.html

# Full path to the main blog page header file. This value will be ignored if the -h flag is provided
MAIN_HEADER_FILE=/path/to/the/main/header/file.html

# Variables for SFTP connection
USER=ftpusername
HOST=ftp.host.name.com
IDENTITY_FILE=/home/username/.ssh/identity/file

# The format/extension that the files to process are in
SOURCE_EXTENSION=*.md


# Additional (optional) module variables
OPENRING_MODULE=/openring/module/path/openring.sh

# Stop editing
############

# Script functionality begins
############
# If you edit anything below this point, you may break the script!

# Usage message that explains command flags
USAGE="Usage: The blog command takes the following options:
    -b	Build posts from all .md files in the SOURCE_DIR directory
    -p	Publish all built posts in the WORK_DIR directory. Does not overwrite duplicate files in remote SFTP server
    -z	Force publishing of all built posts in the WORK_DIR directory. Overwrites duplicate files in remote SFTP server
    -s  Build and/or publish a single post. i.e. blog -bps filename.md
    -h	Define a custom header file for post building. i.e. blog -bh header-file
    -f	Define a custom footer file for post building. i.e. blog -bf footer-file
    -m  Build and publish the main blog index page from already published posts
    -r  Build and publish the RSS feed file to the ROOT_WEB_DIR path on the public web server
    -S  Build and publish a sitemap.xml file to the ROOT_WEB_DIR path on the public web server"

# Message when an flag does not have an argument and it should
ARG_ERR_MSG="An option you provided requires an argument, see below.
    "

# Function that will display the expected usage
function blogUsage() {
    echo "$USAGE"
    exit 1
}

# Define the SINGLE_POST variable with the default value of empty.
SINGLE_POST=""

# Determine if any arguments were passed in by the user
if (( $# < 1 ))

# If no arguments, print the usage message and exit
then
    blogUsage
fi

# Define the flags the user can pass to the script
while getopts :bpzHh:f:s:mroS flag
do
    case "${flag}" in
	b) BUILD=true;;
	p) PUBLISH=true;;
	z) FORCE_PUB=true;;
	h) HEADER_FILE=${OPTARG};;
	f) FOOTER_FILE=${OPTARG};;
	s) SINGLE_POST=${OPTARG};;
	m) MAIN=true;;
	r) RSS=true;;
	o) OPENRING=true;;
	S) SITEMAP=true;;
	H) blogUsage;;
	:) echo "$ARG_ERR_MSG"
	    blogUsage;;
	*) blogUsage;;
esac
done

# Execution message for multiple posts in the buildPosts function
EXEC_MSG="Building Posts"

# Execution message for single post in the buildPosts function
EXEC_MSG1="Building a single post"

# Execution message for the buildSitemap function
EXEC_MSG2="Generating sitemap"

# Completion message for multiple posts in the buildPosts function
COMPLETION_MSG="Posts Built"

# Completion message for single post in the buildPosts function
COMPLETION_MSG1="Post Built"

# No files to upload message for the publishPosts function when the WORK_DIR folder is empty
NO_FILES_MSG="There are no new posts to publish, the $WORK_DIR directory is empty. Try running blog -b first or blog -bz."

# No files to upload message for the publishPosts function when no new posts are found
NO_FILES_MSG1="There are no new posts to publish, if you want to overwrite posts use the -z flag instead."

# Define the GREP_REGEX variable with the regex to obtain the date from the ls command
GREP_REGEX="[0-9][0-9]:[0-9][0-9] [A-Za-z]"

# Define the EXT_REGEX variable with extended grep regex to match post names
EXT_REGEX=".{0,200}"

# Command to be executed while connected to the web server over SFTP, to list contents of the BLOG_DIR directory
REMOTE_LS="ls -l $BLOG_DIR"

# Define the OUTPUT variable with the output from the REMOTE_LS variable value over the SFTP connection on the web server
OUTPUT=`(echo "$REMOTE_LS"; echo quit) | sftp -b - -i "$IDENTITY_FILE" "$USER"@"$HOST"`

# Define the SVG icon that will be passed in to the buildPosts function
SVG="<svg><path d=\"M12\.586 4.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2 2 0 11-2.828-2.828l3-3z\"></path></svg>"

# Function that will build the post/s
function buildPost() {

            # Determine which variable to use to build posts 
            if [ -z $SINGLE_POST ]
            then
                POST_TYPE=$FILE
            else
                POST_TYPE=$SOURCE_DIR$SINGLE_POST
            fi

    	    # Use the Markdown library to create the temporary HTML file
    	    markdown $POST_TYPE > $WORK_DIR$FILE_NAME
    	
            # Determine if the -o flag was passed in by the user
            if [ -z $OPENRING ]

            # If the -o flag was not passed in, do not include the openring HTML file
            then

    	        # Build the page with the header and footer file content by contactenating to a new HTML file
    	        cat $HEADER_FILE $WORK_DIR$FILE_NAME $FOOTER_FILE > $WORK_DIR$FILE_NAME.html

            # If the -o flag was passed in, include the openring HTML file
            else

    	        # Build the page with the header and footer file content by contactenating to a new HTML file
    	        cat $HEADER_FILE $WORK_DIR$FILE_NAME $WORK_DIR/openring.tmp $FOOTER_FILE > $WORK_DIR$FILE_NAME.html
            fi

    	    # Add HTML id attributes to h2-h4 header tags in the newly created HTML file
    	    sed -i 's/<h\([2-4]\)>\(.*\)<\/h[2-4]>/<h\1 id="\L\2">\E\2<\/h\1>/' $WORK_DIR$FILE_NAME.html

    	    # This 3 part section will add hyphens to the id attributes added
    	    # Separate the id attributes from the header content in two separate lines
    	    sed -i '/^<h[2-4] id=".*">/ s/>/>\n/' $WORK_DIR$FILE_NAME.html

    	    # Add hyphens to the line with the HTML id attribute
    	    sed -i '/^<h[2-4] id=".*">/ s/ /-/2g' $WORK_DIR$FILE_NAME.html

    	    # Append the separated lines to eachother leaving a single line
    	    sed -i '/^<h[2-4] id=".*">/ N; s/\n//' $WORK_DIR$FILE_NAME.html

            # Add an SVG icon to h2-h4 tags, to be shown on heading hover
            sed -i "s;^\(<h[2-4] id=\"\(.*\)\">\)\(.*\)\(<\/h[2-4]\);\1\3<a href=$BLOG_DOMAIN/$BLOG_DIR_NAME/$FILE_NAME.html#\2>$SVG<\/a>\4;g" $WORK_DIR$FILE_NAME.html

            # Grab the article title from the first <h1> tag found
            local ARTICLE_TITLE=$(grep -m1 "^<h1>" $WORK_DIR$FILE_NAME | sed "s|<h1>\(.*\)</h1>|\1|")

            # Insert ARTICLE_TITLE into the first <title> tag
            sed -i "0,/^[[:space:]]*<title>/ s|<title>.*</title>|<title>$ARTICLE_TITLE</title>|" $WORK_DIR$FILE_NAME.html

    	    # Delete the $FILE_NAME file which has no .html extension
    	    rm $WORK_DIR$FILE_NAME
}

# Function that will build the posts
function buildPosts() {

    # Determine if the SINGLE_POST variable is empty 
    if [ -z $SINGLE_POST ]

    #If the SINGLE_POST variables is empty then the -s flag was not passed in. Build all posts inside the WORK_DIR
    then

	# Message when starting the build process for multiple posts
    	echo $EXEC_MSG

    	# For loop that goes over all files with the .md extension in the specified directory
    	for FILE in $SOURCE_DIR$SOURCE_EXTENSION
    	do
    	    # Define for loop variables
    	    # Define the FILE_NAME variable from the FILE variable value, removes the extension
    	    FILE_NAME=`basename "$FILE" | cut -d "." -f 1`
    	
    	    # Define the HEADER_FILE variable in the for loop from the global HEADER_FILE variable value
    	    HEADER_FILE=$1
    	
    	    # Define the FOOTER_FILE variable in the for loop from the global FOOTER_FILE variable value
    	    FOOTER_FILE=$2
    	
    	    # Define the WORK_DIR variable in the for loop from the global WORK_DIR variable value
    	    WORK_DIR=$3

    	    # Define the CURRENT_FILE variable
    	    CURRENT_FILE="Creating $FILE_NAME"
    		
    	    # Echo the value of the CURRENT_FILE variable value, the current post being created
    	    echo $CURRENT_FILE
    	
    	    # Execute the buildPost function
            buildPost
    	
    	# End the for loop
    	done

    	# Echo a completion message
    	echo $COMPLETION_MSG 

    # If the SINGLE_POST variable is not empty then the -s flag was passed in. Build only the SINGLE_POST
    else

	# Echo a message when starting the build process for single posts
    	echo $EXEC_MSG1

    	# Define the FILE_NAME variable from the SINGLE_POST variable value, removes the extension
    	FILE_NAME=`basename "$SINGLE_POST" | cut -d "." -f 1`

    	# Echo the value of the SINGLE_POST variable value, the current post being created
    	echo $SINGLE_POST
    	
    	# Execute the buildPost function
        buildPost

    	# Echo a message when single post building has completed
    	echo $COMPLETION_MSG1
    fi
}

# Function that will publish the posts to the public web server
function publishPosts() {

    # Determine if the SINGLE_POST variable is empty 
    if [ -z $SINGLE_POST ]

    #If the SINGLE_POST variables is empty then the -s flag was not passed in, publish multiple posts.
    then

	# Define the ALL_FILES variable with the value of the HTML files that are present in the WORK_DIR directory
    	ALL_FILES=`ls -A $WORK_DIR | grep ".html$"`

    	# Define the FILES variable with the value of the local files names that are not present on the file server
    	FILES=`diff <(ls $WORK_DIR | sort -f) <(grep -oE " $GREP_REGEX$EXT_REGEX" <<< "$OUTPUT" | cut -d " " -f 3 | sort -f) | grep -E "^[<].*html$" | sed 's/< //'`

    	# Define the NUMBER variable with the count of files to be uploaded to the web server
    	NUMBER=`diff <(ls $WORK_DIR | sort -f) <(grep -oE " $GREP_REGEX$EXT_REGEX" <<< "$OUTPUT" | cut -d " " -f 3 | sort -f) | grep -E "^[<].*html$" | sed 's/< //' | wc -l`

    	# Deterimine if the force flag was used
    	if [ $1 ]
    	then

    	    # Determine if any files exist in the $WORK_DIR directory
    	    if [ "$(ls -A $WORK_DIR)" ]
    	    then

    		# Upload the files in the FILES variable to the web server
    		echo "$ALL_FILES" | while read LINE ; do (echo cd $BLOG_DIR; echo lcd $WORK_DIR; echo put $LINE; echo quit) | sftp -b - -i "$IDENTITY_FILE" "$USER"@"$HOST" ; done

    	    else

    		    # Echo a message and do nothing if there are no files in the WORK_DIR directory
    		    echo $NO_FILES_MSG
    	    fi

    	else

    	    # Determine if there are any new files (that don't already exist in the web server) that need to be uploaded to the web server
    		if [ $NUMBER -ge 1 ]
    		then
    		    
    		    # Upload the files in the FILES variable to the web server
    		    echo "$FILES" | while read LINE ; do (echo cd $BLOG_DIR; echo lcd $WORK_DIR; echo put $LINE; echo quit) | sftp -b - -i "$IDENTITY_FILE" "$USER"@"$HOST" ; done
    		
    		else

    		    # Echo a message and do nothing if there are no new files in the WORK_DIR directory
    		    echo $NO_FILES_MSG1
    		fi
    	fi
    # If the SINGLE_POST variable is not empty then the -s flag was passed in. Publish only the SINGLE_POST
    else

    	# Define the FILE_NAME variable from the SINGLE_POST variable value, removes the extension
    	FILE_NAME=`basename "$SINGLE_POST" | cut -d "." -f 1`

	# Upload the SINGLE_POST file to the web server forcefully (Will overwrite if file exists)
	(echo cd $BLOG_DIR; echo lcd $WORK_DIR; echo put $FILE_NAME.html; echo quit) | sftp -i "$IDENTITY_FILE" "$USER"@"$HOST"
    fi
}

# Function that will build the blog index page
function buildMain() {

	# List the content of the webserver directory
	SERVER_FILES=`(echo cd $BLOG_DIR; echo ls; echo quit) | sftp -i "$IDENTITY_FILE" "$USER"@"$HOST" | grep -v "sftp"`
	
	# Write the content of SERVER_FILES to the blog-pages.tmp file
	echo $SERVER_FILES > $WORK_DIR/blog-pages.tmp

	# Remove new lines from the blog-pages.tmp file
	sed -i 's/ /\n/g' $WORK_DIR/blog-pages.tmp

	# Loop through every entry in the blog-pages.tmp and do a curl on each
	# Parse the curl output with sed to create the blog entries section // Cleanup pending
	cat $WORK_DIR/blog-pages.tmp | while read line; do curl -s $BLOG_DOMAIN/$BLOG_DIR_NAME/$line | sed -n "/^<h1>/{N;N}; s/\n\n//; s/<h1>\(.*\)<\/h1><h5>Published: \([0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]\)\(.*\)/<p>\2 <a href=\"$BLOG_DIR_NAME\/$line\">\1<\/a><\/p>/p" >> $WORK_DIR/blog-entries.tmp;done

	# Sort the content of blog-entries.tmp to have the newest on top
	cat $WORK_DIR/blog-entries.tmp | sort -r > $WORK_DIR/sorted-entries.tmp

	# Define the FILE_NAME variable from the BLOG_INDEX variable value, removes the extension
    	FILE_NAME=`basename "$BLOG_INDEX" | cut -d "." -f 1`

    	# Build the page with the MAIN_HEADER_FILE, $WORK_DIR/sorted-entries.tmp and FOOTER_FILE content by contactenating to a new HTML file
    	cat $MAIN_HEADER_FILE $WORK_DIR/sorted-entries.tmp $FOOTER_FILE > $WORK_DIR$FILE_NAME.html

	# Delete temporary file blog-pages.tmp
	rm $WORK_DIR/blog-pages.tmp

	# Delete temporary file blog-entries.tmp
	rm $WORK_DIR/blog-entries.tmp

	# Delete temporary file sorted-entries.tmp
	rm $WORK_DIR/sorted-entries.tmp

	# Upload the FILE_NAME file to the web server forcefully (Will overwrite if file exists)
	(echo cd $ROOT_WEB_DIR; echo lcd $WORK_DIR; echo put $WORK_DIR$FILE_NAME.html; echo quit) | sftp -i "$IDENTITY_FILE" "$USER"@"$HOST"
}

# Function that will build the blog RSS feed
function buildFeed() {

    # curl the BLOG_MAIN_PAGE parse output with sed to create the RSS feed items // Cleanup pending
	curl -s $BLOG_MAIN_PAGE | sed -n "/<p>[0-9][0-9][0-9][0-9]/ s;<p>\(.*\) <a href=\"\(.*\)\">\(.*\)</a></p>;<item>\n<title>\3</title>\n<description>\2</description>\n<link>$BLOG_DOMAIN$BLOG_MAIN\2</link>\n<guid>$BLOG_DOMAIN$BLOG_MAIN\2</guid>\n<pubDate>\1</pubDate>\n</item>;p" >> $WORK_DIR/rss-entries.tmp

    # Add post contents to the RSS <description> tag
    cat $WORK_DIR/rss-entries.tmp | while read line; do

        # Store the contents if line matches the regex
        if [[ $line =~ (.*\<description>)(.*)(</description>.*) ]]
        then

            # Set the FILE_NAME variable to the output of the basename command
            FILE_NAME=$(basename $WORK_DIR/${BASH_REMATCH[2]} | cut -d "." -f 1)

            # Set the DESCRIPTION_CONTENT variable
            DESCRIPTION_CONTENT=$(cat $SOURCE_DIR$FILE_NAME.md | grep -v "Table of Contents" | grep -v "\- \[" | head -25 | sed "s|<.*>||g" | sed "s|#||g"  | sed "s| \[\([^]]*\)\]([^]]*)| \1|g" )

            # Redifine the line variable to the output of the line reconstruction
            line="${BASH_REMATCH[1]}$DESCRIPTION_CONTENT${BASH_REMATCH[3]}"
        fi

        # Print the value of the line
        echo $line

    # Write the output to the rss-entries.desc.tmp file
    done > $WORK_DIR/rss-entries-desc.tmp

    # Build the feed.tmp file with the RSS_HEADER_FILE, rss_entries-desc.tmp and RSS_FOOTER_FILE content
    cat $RSS_HEADER_FILE $WORK_DIR/rss-entries-desc.tmp $RSS_FOOTER_FILE > $WORK_DIR/feed.tmp

    # Update dates on the generated feed.tmp file to comply with RFC-822 specification
    cat $WORK_DIR/feed.tmp | while IFS= read -r line; do

        # Store the contents if line matches the regex
        if [[ $line =~ (.*<pubDate>)([0-9]{4}-[0-9]{2}-[0-9]{2})(</pubDate>.*) ]]
        then

            # Set the NEW_DATE variable to the output of the date command
            NEW_DATE=$(date -d "${BASH_REMATCH[2]}" +"%a, %d %b %Y %T %z")

            # Redifine the line variable to the ouput of the line reconstruction
            line="${BASH_REMATCH[1]}$NEW_DATE${BASH_REMATCH[3]}"
        fi

        # Print the value of the line
        echo "$line"
        
    # Write the ouput to the feed.xml file
    done > $WORK_DIR/feed.xml

    # Upload the feed.xml file to the ROOT_WEB_DIR forcefully (Will overwrite if file exists)
    (echo cd $ROOT_WEB_DIR ; echo lcd $WORK_DIR; echo put feed.xml; echo quit) | sftp -i "$IDENTITY_FILE" "$USER"@"$HOST"

	# Delete temporary file rss_entries.tmp
	rm $WORK_DIR/rss-entries.tmp

	# Delete temporary file rss_entries-desc.tmp
	rm $WORK_DIR/rss-entries-desc.tmp

	# Delete temporary file feed.tmp
	rm $WORK_DIR/feed.tmp
}

# Function that will build the blog sitemap
function buildSitemap() {

    # Print message while creating sitemap
    echo "$EXEC_MSG2"

    # curl the BLOG_MAIN_PAGE parse output with sed to create the sitemap items // Cleanup pending
	curl -s $BLOG_MAIN_PAGE | sed -n "/<p>[0-9][0-9][0-9][0-9]/ s;<p>\(.*\) <a href=\"\(.*\)\">\(.*\)</a></p>;<url>\n<loc>$BLOG_DOMAIN$BLOG_MAIN\2</loc>\n<lastmod>\2</lastmod>\n</url>;p" >> $WORK_DIR/sitemap.tmp

    # Add the sitemap heading to the sitemap.tmp file
    sed -i "1s;^;<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\n;" $WORK_DIR/sitemap.tmp

    # Add the footer to the sitemap.tmp file
    echo "</urlset>" >> $WORK_DIR/sitemap.tmp
    
    # Update dates on the generated sitemap.tmp file 
    cat $WORK_DIR/sitemap.tmp | while IFS= read -r line; do

        # Store the contents if line matches the regex
        if [[ $line =~ (.*\<lastmod>)(.*)(</lastmod>.*) ]]
        then

            # Set the FILE_NAME variable to the output of the basename command
            FILE_NAME=$(basename $WORK_DIR/${BASH_REMATCH[2]} | cut -d "." -f 1)

            # Set the LAST_UPDATE_DATE variable
            LAST_UPDATE_DATE=$(cat $SOURCE_DIR$FILE_NAME.md | grep -m1 "^#####" | awk '{print $7}' )

            # Redifine the line variable to the output of the line reconstruction
            line="${BASH_REMATCH[1]}$LAST_UPDATE_DATE${BASH_REMATCH[3]}"
        fi

        # Print the value of the line
        echo "$line"
        
    # Write the ouput to the feed.xml file
    done > $WORK_DIR/sitemap.xml

    # Upload the sitemap.xml file to the ROOT_WEB_DIR forcefully (Will overwrite if file exists)
    (echo cd $ROOT_WEB_DIR ; echo lcd $WORK_DIR; echo put sitemap.xml; echo quit) | sftp -i "$IDENTITY_FILE" "$USER"@"$HOST"

	# Delete temporary file sitemap.tmp
	rm $WORK_DIR/sitemap.tmp
}

# Execute the createOpenring function if the -o flag was specified by the user. 
# This option will build and include the openring.html file to created posts 
if [ $OPENRING ]
then

    # Fetch the OPENRING_MODULE file
    source $OPENRING_MODULE

    # Call the createOpenring function
    createOpenring
fi

# Execute the buildPosts function if the -b flag was specified by the user. 
# This option will convert all files from .md to .html by using the markdown command
if [ $BUILD ]
then

    # Call the buildWebsite function and pass global variables
    buildPosts $HEADER_FILE $FOOTER_FILE $WORK_DIR
fi

# Execute the publishPosts function if the -p flag was specified by the user. 
# This option will only upload files if they are not already found on the web server
if [ $PUBLISH ]
then

    # Call the publishPosts function
    publishPosts
fi

# Execute the publishPosts function without checking for new posts if the -z flag was specified by the user. 
# This option will force upload of all files in $WORK_DIR to $BLOG_DIR resulting in overwriting of existing files in the web server 
if [ $FORCE_PUB ]
then

    # Call the publishPosts function and pass the FORCE_PUB variable
    publishPosts $FORCE_PUB
fi

# Execute the buildMain function if the -m flag was specified by the user. 
# This option will build and publish the main blog page to the web server
if [ $MAIN ]
then

    # Call the buildMain function
    buildMain
fi

# Execute the buildFeed function if the -r flag was specified by the user. 
# This option will build and publish the feed.xml file to the web server
if [ $RSS ]
then

    # Call the buildFeed function
    buildFeed
fi

# Execute the buildSitemap function if the -S flag was specified by the user. 
# This option will build and publish the sitemap.xml file to the web server
if [ $SITEMAP ]
then

    # Call the buildSitemap function
    buildSitemap
fi
