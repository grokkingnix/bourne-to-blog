#! /bin/bash

# Edit these variables to fit your environment before first use

# Start editing
############

# Define global script variables
# Source directory that contains the original files to process
SOURCE_DIR=/path/to/the/md/files/that/will/be/built

# Directory to store html files created by the buildWebsite function
WORK_DIR=/directory/to/store/your/built/blog/posts

# Blog posts path on the public server
BLOG_DIR=/blog/path/on/your/webserver

# Full path to the header file. This value will be ignored if the -h flag is provided
HEADER_FILE=/path/to/the/header/file.html

# Full path to the footer file. This value will be ignored if the -f flag is provided
FOOTER_FILE=/path/to/the/footer/file.html

# Variables for SFTP connection
USER=ftpusername
HOST=ftp.host.name.com
IDENTITY_FILE=/home/username/.ssh/identity/file

# The format/extension that the files to process are in
SOURCE_EXTENSION=*.md

# Stop editing
############

# Script functionality begins
############
# If you edit anything below this point, you may break the script!

# Usage message that explains command flags
USAGE="Usage: The blog command takes the following options:
    -b	Build posts from all $SOURCE_EXTENSION files in the WORK_DIR directory
    -s  Build / Publish a single post. This flag expects a $SOURCE_EXTENSION file name, the file should be in the WORK_DIR directory
	This will build a single file i.e. blog -bs filename.md
	This will publish a single file i.e. blog -ps filename.md
	This will build and publish a single file i.e. blog -bps filename.md
    -p	Publish all built posts in the WORK_DIR directory. Does not overwrite duplicate files in remote SFTP server
    -z	Force publishing of all built posts in the WORK_DIR directory. Overwrites duplicate files in remote SFTP server
    -h	Define a custom header file for building. i.e. blog -bh /home/user/header-file
    -f	Define a custom footer file for building. i.e. blog -bf /home/user/footer-file"

# Message when an flag does not have an argument and it should
ARG_ERR_MSG="An option you provided requires an argument, see below.
    "

# Function that will display the expected usage
function blogUsage() {
    echo "$USAGE"
}

# Function that will display command usage and exit
function exitBlog() {
    blogUsage
    exit 1
}

# Define the SINGLE_POST variable with the default value of empty.
SINGLE_POST=""

# Define the flags the user can pass to the script
while getopts :bpzh:f:s: flag
do
    case "${flag}" in
	b) BUILD=true;;
	p) PUBLISH=true;;
	z) FORCE_PUB=true;;
	h) HEADER_FILE=${OPTARG};;
	f) FOOTER_FILE=${OPTARG};;
	s) SINGLE_POST=${OPTARG};;
	:) echo "$ARG_ERR_MSG"
	    exitBlog;;
	*) exitBlog;
esac
done

# Execution message for multiple posts in the buildPosts function
EXEC_MSG="Building Posts"

# Execution message for single post in the buildPosts function
EXEC_MSG1="Building a single post"

# Completion message for multiple posts in the buildPosts function
COMPLETION_MSG="Posts Built"

# Completion message for single post in the buildPosts function
COMPLETION_MSG1="Post Built"

# No files to upload message for the publishPosts function when the WORK_DIR folder is empty
NO_FILES_MSG="There are no new posts to publish, the $WORK_DIR directory is empty. Try running blog -b first or blog -bf."

# No files to upload message for the publishPosts function when no new posts are found
NO_FILES_MSG1="There are no new posts to publish, if you want to overwrite posts use the -f flag instead."

# Define the GREP_REGEX variable with the regex to obtain the date from the ls command
GREP_REGEX="[0-9][0-9]:[0-9][0-9] [A-Za-z]"

# Define the EXT_REGEX variable with extended grep regex to match post names
EXT_REGEX=".{0,200}"

# Command to be executed while connected to the web server over SFTP, to list contents of the BLOG_DIR directory
REMOTE_LS="ls -l $BLOG_DIR"

# Define the OUTPUT variable with the output from the REMOTE_LS variable value over the SFTP connection on the web server
OUTPUT=`(echo "$REMOTE_LS"; echo quit) | sftp -b - -i "$IDENTITY_FILE" "$USER"@"$HOST"`

# Function that will build the posts
function buildPosts() {

    # Determine if the SINGLE_POST variable is empty 
    if [ -z $SINGLE_POST ]

    #If the SINGLE_POST variables is empty then the -s flag was not passed in. Build all posts inside the WORK_DIR
    then
	# Message when starting the build process for multiple posts
    	echo $EXEC_MSG

    	# For loop that goes over all files with the .md extension in the specified directory
    	for FILE in $SOURCE_DIR$SOURCE_EXTENSION
    	do
    	    # Define for loop variables
    	    # Define the FILE_NAME variable from the FILE variable value, removes the extension
    	    FILE_NAME=`basename "$FILE" | cut -d "." -f 1`
    	
    	    # Define the HEADER_FILE variable in the for loop from the global HEADER_FILE variable value
    	    HEADER_FILE=$1
    	
    	    # Define the FOOTER_FILE variable in the for loop from the global FOOTER_FILE variable value
    	    FOOTER_FILE=$2
    	
    	    # Define the WORK_DIR variable in the for loop from the global WORK_DIR variable value
    	    WORK_DIR=$3

    	    # Define the CURRENT_FILE variable
    	    CURRENT_FILE="Creating $FILE_NAME"
    		
    	    # Echo the value of the CURRENT_FILE variable value, the current post being created
    	    echo $CURRENT_FILE
    	
    	    # Use the Markdown library to create the temporary HTML file
    	    markdown $FILE > $WORK_DIR$FILE_NAME
    	
    	    # Build the page with the header and footer file content by contactenating to a new HTML file
    	    cat $HEADER_FILE $WORK_DIR$FILE_NAME $FOOTER_FILE > $WORK_DIR$FILE_NAME.html

    	    # Add HTML id attributes to h2-h4 header tags in the newly created HTML file
    	    sed -i 's/<h\([2-4]\)>\(.*\)<\/h[2-4]>/<h\1 id="\L\2">\E\2<\/h\1>/' $WORK_DIR$FILE_NAME.html

    	    # This 3 part section will add hyphens to the id attributes added
    	    # Separated the id attributes from the header content in two separate lines
    	    sed -i '/^<h[2-4] id=".*">/ s/>/>\n/' $WORK_DIR$FILE_NAME.html

    	    # Add hyphens to the line with the HTML id attribute
    	    sed -i '/^<h[2-4] id=".*">/ s/ /-/2g' $WORK_DIR$FILE_NAME.html

    	    # Append the separated lines to eachother leaving a single line
    	    sed -i '/^<h[2-4] id=".*">/ N; s/\n//' $WORK_DIR$FILE_NAME.html

    	    # Delete the $FILE_NAME file which has no .html extension
    	    rm $WORK_DIR$FILE_NAME
    	
    	# End the for loop
    	done

    	# Echo a completion message
    	echo $COMPLETION_MSG 

    # If the SINGLE_POST variable is not empty then the -s flag was passed in. Build only the SINGLE_POST
    else

	# Echo a message when starting the build process for single posts
    	echo $EXEC_MSG1

    	# Define the FILE_NAME variable from the SINGLE_POST variable value, removes the extension
    	FILE_NAME=`basename "$SINGLE_POST" | cut -d "." -f 1`

    	# Echo the value of the SINGLE_POST variable value, the current post being created
    	echo $SINGLE_POST
    	
    	# Use the Markdown library to create the temporary HTML file
    	markdown $SINGLE_POST > $WORK_DIR$FILE_NAME
    	
    	# Build the page with the header and footer file content by contactenating to a new HTML file
    	cat $HEADER_FILE $WORK_DIR$FILE_NAME $FOOTER_FILE > $WORK_DIR$FILE_NAME.html

    	# Add HTML id attributes to h2-h4 header tags in the newly created HTML file
    	sed -i 's/<h\([2-4]\)>\(.*\)<\/h[2-4]>/<h\1 id="\L\2">\E\2<\/h\1>/' $WORK_DIR$FILE_NAME.html

    	# This 3 part section will add hyphens to the id attributes added
    	# Separated the id attributes from the header content in two separate lines
    	sed -i '/^<h[2-4] id=".*">/ s/>/>\n/' $WORK_DIR$FILE_NAME.html

    	# Add hyphens to the line with the HTML id attribute
    	sed -i '/^<h[2-4] id=".*">/ s/ /-/2g' $WORK_DIR$FILE_NAME.html

    	# Append the separated lines to eachother leaving a single line
    	sed -i '/^<h[2-4] id=".*">/ N; s/\n//' $WORK_DIR$FILE_NAME.html

    	# Delete the $FILE_NAME file which has no .html extension
    	rm $WORK_DIR$FILE_NAME

    	# Echo a message when single post building has completed
    	echo $COMPLETION_MSG1
    fi
}

# Function that will publish the posts to the public web server
function publishPosts() {

    # Determine if the SINGLE_POST variable is empty 
    if [ -z $SINGLE_POST ]

    #If the SINGLE_POST variables is empty then the -s flag was not passed in, publish multiple posts.
    then

	# Define the ALL_FILES variable with the value of the HTML files that are present in the WORK_DIR directory
    	ALL_FILES=`ls -A $WORK_DIR | grep ".html$"`

    	# Define the FILES variable with the value of the local files names that are not present on the file server
    	FILES=`diff <(ls $WORK_DIR | sort -f) <(grep -oE " $GREP_REGEX$EXT_REGEX" <<< "$OUTPUT" | cut -d " " -f 3 | sort -f) | grep -E "^[<].*html$" | sed 's/< //'`

    	# Define the NUMBER variable with the count of files to be uploaded to the web server
    	NUMBER=`diff <(ls $WORK_DIR | sort -f) <(grep -oE " $GREP_REGEX$EXT_REGEX" <<< "$OUTPUT" | cut -d " " -f 3 | sort -f) | grep -E "^[<].*html$" | sed 's/< //' | wc -l`

    	# Deterimine if the force flag was used
    	if [ $1 ]
    	then

    	    # Determine if any files exist in the $WORK_DIR directory
    	    if [ "$(ls -A $WORK_DIR)" ]
    	    then

    		# Upload the files in the FILES variable to the web server
    		echo "$ALL_FILES" | while read LINE ; do (echo cd $BLOG_DIR; echo lcd $WORK_DIR; echo put $LINE; echo quit) | sftp -b - -i "$IDENTITY_FILE" "$USER"@"$HOST" ; done

    	    else

    		    # Echo a message and do nothing if there are no files in the WORK_DIR directory
    		    echo $NO_FILES_MSG
    	    fi

    	else

    	    # Determine if there are any new files (that don't already exist in the web server) that need to be uploaded to the web server
    		if [ $NUMBER -ge 1 ]
    		then
    		    
    		    # Upload the files in the FILES variable to the web server
    		    echo "$FILES" | while read LINE ; do (echo cd $BLOG_DIR; echo lcd $WORK_DIR; echo put $LINE; echo quit) | sftp -b - -i "$IDENTITY_FILE" "$USER"@"$HOST" ; done
    		
    		else

    		    # Echo a message and do nothing if there are no new files in the WORK_DIR directory
    		    echo $NO_FILES_MSG1
    		fi
    	fi
    # If the SINGLE_POST variable is not empty then the -s flag was passed in. Publish only the SINGLE_POST
    else

    	# Define the FILE_NAME variable from the SINGLE_POST variable value, removes the extension
    	FILE_NAME=`basename "$SINGLE_POST" | cut -d "." -f 1`

	# Upload the SINGLE_POST file to the web server forcefully (Will overwrite if file exists)
	(echo cd $BLOG_DIR; echo lcd $WORK_DIR; echo put $FILE_NAME.html; echo quit) | sftp -i "$IDENTITY_FILE" "$USER"@"$HOST"
    fi
}

# Execute the buildPosts function if the -b flag was specified by the user. 
# This option will convert all files from .md to .html by using the markdown command
if [ $BUILD ]
then

    # Call the buildWebsite function and pass global variables
    buildPosts $HEADER_FILE $FOOTER_FILE $WORK_DIR
fi

# Execute the publishPosts function if the -p flag was specified by the user. 
# This is option will only upload files if they are not already found on the web server
if [ $PUBLISH ]
then

    # Call the publishPosts function
    publishPosts
fi

# Execute the publishPosts function without checking for new posts if the -z flag was specified by the user. 
# This option will force upload of all files in $WORK_DIR to $BLOG_DIR resulting in overwriting of existing files in the web server 
if [ $FORCE_PUB ]
then

    # Call the publishPosts function and pass the FORCE_PUB variable
    publishPosts $FORCE_PUB
fi
